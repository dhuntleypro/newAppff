import * as react_jsx_runtime from 'react/jsx-runtime';
import React, { FC, ReactNode } from 'react';
import { ViewStyle, TextStyle } from 'react-native';
export { useColorScheme } from 'react-native';
import { OrderModelProps as OrderModelProps$1, OrderItem as OrderItem$1, OrderHistory as OrderHistory$1, FullAddress as FullAddress$1, Parcel as Parcel$1 } from '@/models/OrderModelProps';
import { ProductModelProps as ProductModelProps$1 } from '@/models/ProductModelProps';
import { CollectionModelProps as CollectionModelProps$1 } from '@/models/CollectionModelProps';
import { StoreModelProps as StoreModelProps$1 } from '@/models/StoreModelProps';
import { Link } from 'expo-router';

declare const HomeLayoutContent: () => react_jsx_runtime.JSX.Element;

declare const AuthLayoutContent: () => react_jsx_runtime.JSX.Element;

declare const BannerVOne: () => react_jsx_runtime.JSX.Element;

interface MyButtonProps {
    onPress: () => void;
    title: string;
    buttonStyle?: ViewStyle;
    textStyle?: TextStyle;
}

declare const MyButton: React.FC<MyButtonProps>;

declare const OrderCrudCard: FC<OrderModelProps$1>;

declare const ClientOrderCard: React.FC<{
    order: OrderModelProps$1;
}>;

declare const ProductCardV2: FC<ProductModelProps$1>;

interface ProductCardProps {
    product: ProductModelProps$1;
    viewTypeGrid: boolean;
}
declare const ProductGridCardVOne: FC<ProductCardProps>;

declare const ProductHScrollCardVOne: FC<{
    product: ProductModelProps$1;
}>;

declare const ProductCrudCard: FC<ProductModelProps$1>;

declare const DeleteSectionView: () => react_jsx_runtime.JSX.Element;

declare const Divider: () => react_jsx_runtime.JSX.Element;

declare function EditScreenInfo({ path }: {
    path: string;
}): react_jsx_runtime.JSX.Element;

interface VariantInfoProps {
    title: string;
    description: string;
    price: number;
    sale_price: number;
    inventory: number;
}
interface ProductVariantProps {
    id: string;
    title: string;
    image: string;
    color_code: string;
    price: number;
    sale_price: number;
    description: string;
    features: string[];
    inventory: number;
    value_price: number;
    product_id: string;
    variantInfo: VariantInfoProps[];
}
interface ItemReviewsProps {
    userName: string;
    title: string;
    comment: string;
}
interface ProductModelProps {
    id: string;
    store_id: string;
    index: number;
    createdOn: string;
    active: boolean;
    name: string;
    image: string;
    price: number;
    on_sale: boolean;
    sale_price: number;
    slug: string;
    quantity: number;
    description: string;
    icon_name: string;
    category: string;
    images: string[];
    included: string[];
    materials: string[];
    tags: string[];
    brand: string;
    views: number;
    likes: number;
    isLiked: boolean;
    gender: string;
    color: string;
    color_code: string;
    condition: string;
    features: string[];
    sku: string;
    variant_type: boolean;
    variant_selected: Record<string, any>;
    variants: ProductVariantProps[];
    last_updated: string;
    item_type: string;
    ingredients: string[];
    inventory: number;
    reviews: ItemReviewsProps[];
    rating: number[];
    size: string;
    sizes: string[];
    weight: number;
    year_made: number;
}

declare const ProductListItem: FC<ProductModelProps>;

interface TextFieldVOneProps {
    label: string;
    value: string;
    secureTextEntry?: boolean;
    editable?: boolean;
}
declare const TextFieldVOne: React.FC<TextFieldVOneProps>;

declare const CartIcon: () => react_jsx_runtime.JSX.Element;

declare const CartPageVOne: React.FC;

declare const CollectionPageVTwo: () => react_jsx_runtime.JSX.Element;

declare const LoginComponentTwo: () => react_jsx_runtime.JSX.Element;

interface ProductDetailsPageVThreeProps {
    showSize: boolean;
}
declare const ProductDetailsPageVThree: FC<ProductDetailsPageVThreeProps>;

declare const ProductDetails: React.FC;

declare const RegisterComponentTwo: () => react_jsx_runtime.JSX.Element;

declare const SettingsPage: () => react_jsx_runtime.JSX.Element;

declare const WelcomePageTwo: () => react_jsx_runtime.JSX.Element;

declare const TermsOfUsePage: () => react_jsx_runtime.JSX.Element;

declare const PrivacyPolicyPage: () => react_jsx_runtime.JSX.Element;

declare const CookiesPage: () => react_jsx_runtime.JSX.Element;

declare const AppearanceSelection: React.FC;

declare const FAQPage: () => react_jsx_runtime.JSX.Element;

declare const FavoritesPageVOne: React.FC;

declare const ProfilePage: React.FC;

declare const CollectionProductSearchScreen: () => react_jsx_runtime.JSX.Element;

declare const ProductSearchScreen: () => react_jsx_runtime.JSX.Element;

declare const HomeDesignOne: () => react_jsx_runtime.JSX.Element;

declare const HomeDesignTwo: () => react_jsx_runtime.JSX.Element;

interface CartItem {
    id: string;
    productID: string;
    price: number;
    quantity: number;
    size: string;
    color: string;
    notes: string;
}
interface UserProps {
    id: string;
    store_ids: string[];
    store_owner_id: string;
    onboardingQ1: string;
    onboardingQ2: string;
    onboardingQ3: string;
    onboardingQ4: string;
    orders: string[];
    favoriteItems: string[];
    cart: CartItem[];
    abandonedCart?: boolean;
    affiliate_link: string;
    active: boolean;
    role: string;
    birthday: string;
    todo_completed: boolean;
    tableName: string;
    name: string;
    username: string;
    email: string;
    password: string;
    phone_number: string;
    gender: string;
    profile_image: string;
    isAdmin?: boolean;
    address?: string;
    address_city: string;
    address_state: string;
    address_zip?: string;
    location?: string;
    location_history: string[];
    current_notification: string;
    notifications: string[];
    payment_due: number;
    payment_due_date: string;
    payment_due_day: string;
    payment_monthly_amount: number;
    device_id: string;
    device_os_version: string;
    device_model: string;
    device_ip_address: string;
    device_battery_level: string;
    device_battery_statue: string;
    device_network_connectio_type: string;
    loyalty_date: string;
    payment_history_total: number;
    subscription_id: string;
    paid_subscriber: boolean;
    newsletter_subscriber: boolean;
    notification_subscriber: boolean;
    left_review: boolean;
    review_stars: number[];
    reviews: string[];
    testimonials: string[];
    notify_arn: string;
    owner_notify_arn: string;
}

interface AuthState {
    user: UserProps | null;
    token: string | null;
    authenticated: boolean;
}
interface AuthContextType {
    authState: AuthState;
    onRegister: (storeID: string, user: UserProps) => Promise<any>;
    onLogin: (storeID: string, email: string, password: string) => Promise<any>;
    onLogout: () => Promise<void>;
    updateSingleUserItem: (updateKey: keyof UserProps, updateValue: any) => Promise<void>;
    addToFavorites: (itemId: string) => Promise<void>;
    removeFromFavorites: (itemId: string) => Promise<void>;
    isFavorite: (itemId: string) => boolean;
    deleteUser: (email: string) => Promise<void>;
}
declare const useAuth: () => AuthContextType;
declare const AuthProvider: ({ children }: {
    children: React.ReactNode;
}) => react_jsx_runtime.JSX.Element | null;

interface CartContextType {
    carts: Partial<ProductModelProps$1>[];
    addToCart: (item: Partial<ProductModelProps$1>) => Promise<void>;
    decreaseFromCart: (item: Partial<ProductModelProps$1>) => void;
    deleteItemFromCart: (item: Partial<ProductModelProps$1>) => void;
    totalSum: number;
    totalTax: number;
    totalShipping: number;
    grandTotal: number;
    quantity: number;
    clearData: () => void;
}
declare const useCart: () => CartContextType;
interface CartProviderProps {
    children: ReactNode;
    storage: {
        getItem: (key: string) => Promise<string | null>;
        setItem: (key: string, value: string) => Promise<void>;
        removeItem: (key: string) => Promise<void>;
    };
    storageKey: string;
}
declare const CartProvider: React.FC<CartProviderProps>;

interface ClientCollectionContextProps {
    collection: CollectionModelProps$1 | null;
    collections: CollectionModelProps$1[];
    getClientCollections: (store_id: string) => Promise<void>;
    getClientCollection: (collection_owner_id: string) => Promise<void>;
    addCollection: (collection: CollectionModelProps$1) => void;
    removeCollection: () => void;
    selectedCollection: CollectionModelProps$1 | null;
    selectCollection: (collection: CollectionModelProps$1) => void;
    error: string | null;
    isLoading: boolean;
}
declare const useClientCollection: () => ClientCollectionContextProps;
declare const ClientCollectionProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface OrderHistory {
    id: string;
    title: string;
    orderPlaced: boolean;
    orderEmailSent: boolean;
    orderPaymentReceived: boolean;
    inventoryCheck: string;
    orderProcessed: boolean;
    orderPackaged: boolean;
    orderShippingLabelGenerated: boolean;
    orderShipped: boolean;
    shippedDate: string;
    trackingNumber: string;
    deliveryConfirmed: boolean;
    orderDeliveryDate: string;
    orderReturned: boolean;
    orderReturnLabelGenerated: boolean;
    status: string;
    note: string;
}
interface Parcel {
    length: string;
    width: string;
    height: string;
    distance_unit: string;
    weight: string;
    mass_unit: string;
    value_amount: number;
    metadata: string;
    test: boolean;
}
interface FullAddress {
    name: string;
    streetOne: string;
    streetTwo: string;
    city: string;
    state: string;
    zip: string;
    country: string;
    phone: string;
    email: string;
    is_residential: boolean;
}
interface OrderItem {
    id: string;
    quantity: number;
    sku: string;
    title: string;
    color: string;
    productId: string;
    size: string;
    image: string;
    total_price: number;
    length: string;
    width: string;
    height: string;
    weight: string;
    weight_unit: string;
    distance_unit: string;
    description: string;
    net_weight: string;
    value_amount: number;
    value_currency: string;
    origin_country: string;
    eccn_ear99: string;
}
interface OrderModelProps {
    id: string;
    stripe_id: string;
    store_id: string;
    index: number;
    order_status: string;
    items: OrderItem[];
    userId: string;
    order_history: OrderHistory[];
    total: number;
    net_total: number;
    courier: string;
    shipping_label: string;
    return_label: string;
    from_address: FullAddress;
    to_address: FullAddress;
    parcel: Parcel;
    title: string;
    type: string;
    coupon_code: string;
    referred_by: string;
    statement_descriptor: string;
    note: string;
    budget: string;
    order_placed_date: string;
    order_started_date: string;
    order_created_date: string;
    order_completed_date: string;
    tax: number;
    stripe_fee: number;
    afm_fee: number;
    shipping_cost: number;
    discount_amount: number;
}

interface ClientOrderContextProps {
    orders: OrderModelProps[];
    addOrder: (order: OrderModelProps) => Promise<void>;
    removeOrder: (orderId: string) => Promise<void>;
    updateOrder: (order: OrderModelProps) => Promise<void>;
    getClientOrders: () => void;
    selectedOrder: OrderModelProps | null;
    selectOrder: (order: OrderModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const useClientOrder: () => ClientOrderContextProps;
declare const ClientOrderProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface ClientProductContextProps {
    product: ProductModelProps$1 | null;
    products: ProductModelProps$1[];
    getClientProducts: (store_id: string) => Promise<void>;
    getClientProduct: (product_owner_id: string) => Promise<void>;
    addProduct: (product: ProductModelProps$1) => void;
    removeProduct: () => void;
    selectedProduct: ProductModelProps$1 | null;
    selectProduct: (product: ProductModelProps$1) => void;
    error: string | null;
    isLoading: boolean;
}
declare const useClientProduct: () => ClientProductContextProps;
declare const ClientProductProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface ClientStoreContextProps {
    store: StoreModelProps$1 | null;
    getClientStore: (store_id: string) => void;
    addStore: (store: StoreModelProps$1) => void;
    removeStore: () => void;
    selectedStore: StoreModelProps$1 | null;
    selectStore: (store: StoreModelProps$1) => void;
    error: string | null;
    isLoading: boolean;
}
declare const useClientStore: () => ClientStoreContextProps;
declare const ClientStoreProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface FavoriteContextType {
    favorites: Partial<ProductModelProps$1>[];
    addToFavorite: (item: Partial<ProductModelProps$1>) => Promise<void>;
    decreaseFromFavorite: (item: Partial<ProductModelProps$1>) => void;
    deleteItemFromFavorite: (item: Partial<ProductModelProps$1>) => void;
    totalSum: number;
    totalTax: number;
    totalShipping: number;
    grandTotal: number;
    quantity: number;
    clearData: () => void;
}
declare const useFavorite: () => FavoriteContextType;
interface FavoriteProviderProps {
    children: ReactNode;
    storage: {
        getItem: (key: string) => Promise<string | null>;
        setItem: (key: string, value: string) => Promise<void>;
        removeItem: (key: string) => Promise<void>;
    };
    storageKey: string;
}
declare const FavoriteProvider: React.FC<FavoriteProviderProps>;

interface ProductContextProps {
    products: ProductModelProps[];
    addProduct: (product: ProductModelProps) => void;
    removeProduct: (productId: string) => void;
    getMankindProducts: () => void;
    selectedProduct: ProductModelProps | null;
    selectProduct: (product: ProductModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const useMankindProduct: () => ProductContextProps;
declare const MankindProductProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

interface StoreModelProps {
    id: string;
    owner_id: string;
    store_users: string[];
    stripe_id: string;
    timestamp: string;
    live: boolean;
    status: string;
    store_name: string;
    store_type: string;
    year_founded: string;
    store_primary_category: string;
    store_url: string;
    store_name_alt: string;
    business_type: string;
    store_founder: string;
    business_email: string;
    email: string;
    logo: string;
    zelle_qr_code: string;
    cash_app_qr_code: string;
    phone_number: string;
    store_address: string;
    store_address_state: string;
    store_address_city: string;
    store_address_zip: string;
    socialLinks: StoreSocialLinks;
    storeSettings: StoreSettings;
    seo_helmet: StoreSEO;
    images: StoreImages;
    daysOfOperation?: DaysOfOperation[];
    sliceItems?: SliceItem[];
    legal_doc_cookies_policy: string;
    legal_doc_terms_of_use: string;
    legal_doc_privacy_policy: string;
    legal_doc_contract: string;
    media: string[];
    colors: ColorItem[];
    slice_order: string[];
    slice_header: string;
    slice_footer: string;
    paypal_client_live_id: string;
    paypal_secret_live_key: string;
}
interface ColorItem {
    id: string;
    name: string;
    color_code: string;
}
interface StoreSettings {
    id: string;
    add_to_cart_force_register: boolean;
    font: string;
    popup_timer: number;
    free_shipping_amount: number;
    tax_total: number;
    abandoned_cart_users: string[];
    currency: string;
    default_language: string;
    newsletter_subscription_prompt: string;
    display_welcome_message: boolean;
    default_discount_percentage: number;
}
interface SliceItem {
    id: string;
    name: string;
    page: string;
    type: string;
    position: number;
}
interface StoreImages {
    image_holder: string;
    welcome_image: string;
    about_object_image: string;
    initial_popup_image: string;
    profile_image: string;
    doubleImageHero_left_image: string;
    login_popup_image: string;
    doubleImageHero_right_image: string;
    register_popup_image: string;
    newsletter_popup_image: string;
}
interface DaysOfOperation {
    day: number;
    open: number;
    close: number;
}
interface StoreSocialLinks {
    id: string;
    instagram_url: string;
    facebook_url: string;
    twitter_url: string;
    discord_url: string;
    youTube_url: string;
    tikTok_url: string;
    linkedin_url: string;
    pinterest_url: string;
}
interface StoreSEO {
    id: string;
    helmet_home_page_title: string;
    helmet_home_page_description: string;
    helmet_cancel_payment_page_title: string;
    helmet_cancel_payment_page_description: string;
    helmet_profile_page_title: string;
    helmet_profile_page_description: string;
    helmet_shop_page_title: string;
    helmet_shop_page_description: string;
    helmet_subscribe_page_title: string;
    helmet_subscribe_page_description: string;
    helmet_success_page_title: string;
    helmet_success_page_description: string;
}

interface MankindStoreContextProps {
    store: StoreModelProps | null;
    addStore: (store: StoreModelProps) => void;
    removeStore: (storeId: string) => void;
    getMankindStore: () => void;
    selectedStore: StoreModelProps | null;
    selectStore: (store: StoreModelProps) => void;
    isLoading: boolean;
    error: string | null;
}
declare const useMankindStore: () => MankindStoreContextProps;
declare const MankindStoreProvider: ({ children }: {
    children: ReactNode;
}) => react_jsx_runtime.JSX.Element;

type ThemeMode = 'light' | 'dark' | 'system';
interface StoreTheme {
    light: {
        pageBackground: string;
        pageText: string;
        buttonBackground: string;
        buttonText: string;
        buttonShadow: string;
        tint: string;
        tabIconDefault: string;
        tabIconSelected: string;
        cardBackground: string;
        cardText: string;
        cardSecondaryText: string;
        cardPrice: string;
        cardBorder: string;
        background: string;
        title: string;
        subtitle: string;
        border: string;
        card: string;
        primary: string;
        secondary: string;
    };
    dark: {
        pageBackground: string;
        pageText: string;
        buttonBackground: string;
        buttonText: string;
        buttonShadow: string;
        tint: string;
        tabIconDefault: string;
        tabIconSelected: string;
        cardBackground: string;
        cardText: string;
        cardSecondaryText: string;
        cardPrice: string;
        cardBorder: string;
        background: string;
        title: string;
        subtitle: string;
        border: string;
        card: string;
        primary: string;
        secondary: string;
    };
}
interface ThemeContextProps {
    theme: ThemeMode;
    setTheme: (mode: ThemeMode) => void;
    isDarkMode: boolean;
    colors: StoreTheme['light'] | StoreTheme['dark'];
}
interface ThemeProviderProps {
    children: ReactNode;
    storeTheme: StoreTheme;
    storage: any;
    storageKey: string;
}
declare const useTheme: () => ThemeContextProps;
declare const ThemeProvider: ({ children, storeTheme, storage, storageKey }: ThemeProviderProps) => react_jsx_runtime.JSX.Element;

declare const authApi: {
    get: <T = any>(endpoint: string, options?: Omit<RequestInit, "method"> & {
        params?: Record<string, string | number> | undefined;
    }) => Promise<T>;
    post: <T_1 = any>(endpoint: string, body: any, options?: Omit<RequestInit, "body" | "method"> & {
        params?: Record<string, string | number> | undefined;
    }) => Promise<T_1>;
    patch: <T_2 = any>(endpoint: string, body: any, options?: Omit<RequestInit, "body" | "method"> & {
        params?: Record<string, string | number> | undefined;
    }) => Promise<T_2>;
    put: <T_3 = any>(endpoint: string, body: any, options?: Omit<RequestInit, "body" | "method"> & {
        params?: Record<string, string | number> | undefined;
    }) => Promise<T_3>;
    delete: <T_4 = any>(endpoint: string, options?: Omit<RequestInit, "method"> & {
        params?: Record<string, string | number> | undefined;
    }) => Promise<T_4>;
};
declare const verify: (user: any) => Promise<any>;
declare const login: (user: UserProps) => Promise<any>;
declare const getUsersApi: () => Promise<any>;
declare const getClientUsersApi: (storeID: string, email: string) => Promise<any>;
declare const updateUserApi: (userEmail: string, tableName: string, updateKey: string, updateValue: any) => Promise<any>;
declare const deleteUserApi: ({ email }: {
    email: string;
}) => Promise<any>;

interface CollectionModelProps {
    id: string;
    store_id: string;
    user_id: string;
    index: number;
    timestamp: string;
    title: string;
    description: string;
    caption: string;
    amount: number;
    likes: number;
    isliked: boolean;
    onSale: boolean;
    relatedProductIds: string[];
    image: string;
    images: string[];
    tags: string[];
    active: boolean;
}

declare const getClientCollectionsApi: (storeID: string, showFilteredItems: boolean) => Promise<any[]>;
declare function getClientCollectionApi(id: string): Promise<any>;
declare const postClientCollectionApi: (collection: CollectionModelProps, collectionID: string, email: string, token: string) => Promise<any>;
declare const updateClientCollectionApi: (collection: CollectionModelProps) => Promise<any>;
declare const deleteClientCollectionApi: (id: string) => Promise<any>;

interface CouponModelProps {
    id: string;
    store_id: string;
    user_id: string;
    index: number;
    timestamp: string;
    title: string;
    description: string;
    active: boolean;
    couponCode: string;
    coupontype: CouponType;
    discountPercentage: number;
    validUntil: string;
    minPurchaseAmount: number;
    isActive: boolean;
    productsAppliedTo: string[];
    applyToAll: boolean;
}
declare enum CouponType {
    All = "all",
    Product = "product",
    Products = "products",
    Shipping = "shipping"
}

declare function getClientCouponsApi(couponID: string, email: string): Promise<any>;
declare function getClientCouponApi(id: string): Promise<any>;
declare const postClientCouponApi: (coupon: CouponModelProps, couponID: string, email: string, token: string) => Promise<any>;
declare const updateClientCouponApi: (coupon: CouponModelProps) => Promise<any>;
declare const deleteClientCouponApi: (id: string) => Promise<any>;

interface InboxModelProps {
    id: string;
    store_id: string;
    user_id: string;
}

declare function getClientInboxsApi(inboxID: string, email: string): Promise<any>;
declare function getClientInboxApi(id: string): Promise<any>;
declare const postClientInboxApi: (inbox: InboxModelProps, inboxID: string, email: string, token: string) => Promise<any>;
declare const updateClientInboxApi: (inbox: InboxModelProps) => Promise<any>;
declare const deleteClientInboxApi: (id: string) => Promise<any>;

declare function getMankindProductsApi(storeID: string, email: string): Promise<any>;
declare function getMankindProductApi(id: any): Promise<any>;
declare const postMankindProductApi: (product: ProductModelProps$1, storeID: string, email: string, token: string) => Promise<any>;
declare const updateMankindProductApi: (product: ProductModelProps$1) => Promise<any>;
declare const deleteMankindProductApi: (id: any) => Promise<any>;

declare function getMankindStoresApi(storeID: string, email: string): Promise<any>;
declare function getMankindStoreApi(id: any): Promise<any>;
declare const postMankindStoreApi: (mankindStore: StoreModelProps$1, storeID: string, email: string, token: string) => Promise<any>;
declare const updateMankindStoreApi: (mankindStore: StoreModelProps$1) => Promise<any>;
declare const deleteMankindStoreApi: (id: any) => Promise<any>;

declare function getClientOrdersApi(orderID: string, email: string): Promise<any>;
declare function getClientOrderApi(id: string): Promise<any>;
declare const postClientOrderApi: (order: OrderModelProps, orderID: string, email: string, token: string) => Promise<any>;
declare const updateClientOrderApi: (order: OrderModelProps) => Promise<any>;
declare const deleteClientOrderApi: (id: string) => Promise<any>;

interface PaymentJsonProps {
    amount: number;
    currency: string;
    shipping_fee: number;
    stripe_id: string;
    app_name: string;
}
declare const getpayment: () => Promise<any>;
declare const createPaymentIntent: (paymentJsonProps: PaymentJsonProps) => Promise<any>;
declare const showStripeHostedPage: (priceID: string) => Promise<any>;

declare const getClientProductsApi: (storeID: string, showFilteredItems: boolean) => Promise<any[]>;
declare function getClientProductApi(id: string): Promise<any>;
declare const postClientProductApi: (product: ProductModelProps, productID: string, email: string, token: string) => Promise<any>;
declare const updateClientProductApi: (product: ProductModelProps) => Promise<any>;
declare const deleteClientProductApi: (id: string) => Promise<any>;

declare function getClientStoresApi(storeID: string, email: string): Promise<any>;
declare function getClientStoreApi(id: string): Promise<any>;
declare const postClientStoreApi: (store: StoreModelProps, storeID: string, email: string, token: string) => Promise<any>;
declare const updateClientStoreApi: (store: StoreModelProps) => Promise<any>;
declare const deleteClientStoreApi: (id: string) => Promise<any>;

declare function convertToCurrency(number: number): string;

declare function ExternalLink(props: Omit<React.ComponentProps<typeof Link>, 'href'> & {
    href: string;
}): react_jsx_runtime.JSX.Element;

declare const formatPhoneNumber: (phoneNumberString: string) => string;

declare const generateUUID: (idLength: number) => string;

declare const stripeConverter: (amountInCents: number) => number;

declare function useClientOnlyValue<S, C>(server: S, client: C): S | C;

declare const SAMPLE_ORDER_ITEMS: OrderItem$1[];
declare const SAMPLE_ORDER_HISTORY: OrderHistory$1;
declare const SAMPLE_FULL_ADDRESS: FullAddress$1;
declare const SAMPLE_PARCEL: Parcel$1;
declare const SAMPLE_ORDER: OrderModelProps$1;

declare const SAMPLE_PRODUCT: ProductModelProps$1[];

declare const VERSION = 0.01;
declare const STORE_TYPE: {
    ecom: string;
    blog: string;
    subscription: string;
    appointment: string;
};
declare const API_ID = "yiiuqhh3a3";
declare const BASE_URL = "https://yiiuqhh3a3.execute-api.us-east-1.amazonaws.com/prod";
declare const AWS_BASE_IMAGE: string;
declare const AWS_HOLDER_IMAGE = "https://appsformankind-assets.s3.amazonaws.com/Products/appoint/Flowers.png";
declare const AWS_BASE_URL = "https://yiiuqhh3a3.execute-api.us-east-1.amazonaws.com/prod";
declare const AWS_BASE_URL_2: string;
declare const AWS_VERIFY: string;
declare const AWS_LOGIN_URL: string;
declare const AWS_ORDERS_URL: string;
declare const AWS_SUBSCRIBER_URL: string;

declare const CONSTANTS: {
    appName: string;
    holderImageWelcome: string;
    holderImageProductCard: string;
    holderImageCollectionCard: string;
    holderImageOrderCard: string;
    holderUserImage: string;
    holderCarouselImageOne: string;
    holderCarouselImageTwo: string;
    holderCarouselImageThree: string;
    holderImage: string;
    merchant_id: string;
    publishableKeyLive: string;
    publishableKeyTest: string;
};

declare const PAGES: {
    onboarding_Page: string[];
    login_Page: string[];
    register_Page: string[];
    products_Page: string[];
    product_details_page: string[];
};

declare const ROUTES: {
    onboarding_Page: string;
    login: string;
    register: string;
    products: string;
};

declare const saveToSecureStore: (key: string, value: string) => Promise<void>;
declare const getFromSecureStore: (key: string) => Promise<void>;

declare const COLORS: {
    light: {
        text: string;
        background: string;
        tint: string;
        tabIconDefault: string;
        tabIconSelected: string;
        cardBackground: string;
        cardText: string;
        cardSecondaryText: string;
        cardPrice: string;
        cardBorder: string;
    };
    dark: {
        text: string;
        background: string;
        tint: string;
        tabIconDefault: string;
        tabIconSelected: string;
        cardBackground: string;
        cardText: string;
        cardSecondaryText: string;
        cardPrice: string;
        cardBorder: string;
    };
    primary: string;
    secondary: string;
    tertiary: string;
    darkGray: string;
    green: string;
    forestGreen: string;
    lightGray: string;
    gray: string;
    gray2: string;
    gray3: string;
    offwhite: string;
    white: string;
    black: string;
    blue: string;
    red: string;
    orange: string;
    lightWhite: string;
    backgroundLight: string;
    backgroundMedium: string;
    backgroundDark: string;
};
declare const SIZES: {
    xSmall: number;
    small: number;
    medium: number;
    large: number;
    xLarge: number;
    xxLarge: number;
    height: number;
    width: number;
};
declare const SHADOWS: {
    small: {
        shadowColor: string;
        shadowOffset: {
            width: number;
            height: number;
        };
        shadowOpacity: number;
        shadowRadius: number;
        elevation: number;
    };
    medium: {
        shadowColor: string;
        shadowOffset: {
            width: number;
            height: number;
        };
        shadowOpacity: number;
        shadowRadius: number;
        elevation: number;
    };
};

export { API_ID, AWS_BASE_IMAGE, AWS_BASE_URL, AWS_BASE_URL_2, AWS_HOLDER_IMAGE, AWS_LOGIN_URL, AWS_ORDERS_URL, AWS_SUBSCRIBER_URL, AWS_VERIFY, AppearanceSelection, AuthLayoutContent, AuthProvider, BASE_URL, BannerVOne, COLORS, CONSTANTS, CartIcon, CartPageVOne, CartProvider, ClientCollectionProvider, ClientOrderCard, ClientOrderProvider, ClientProductProvider, ClientStoreProvider, type CollectionModelProps, CollectionPageVTwo, CollectionProductSearchScreen, CookiesPage, type CouponModelProps, DeleteSectionView, Divider, EditScreenInfo, ExternalLink, FAQPage, FavoriteProvider, FavoritesPageVOne, HomeDesignOne, HomeDesignTwo, HomeLayoutContent, type InboxModelProps, LoginComponentTwo, MankindProductProvider, MankindStoreProvider, MyButton, OrderCrudCard, type OrderModelProps, PAGES, PrivacyPolicyPage, type ProductCardProps, ProductCardV2, ProductCrudCard, ProductDetails as ProductDetailsPageVFour, ProductDetailsPageVThree, type ProductDetailsPageVThreeProps, ProductGridCardVOne, ProductHScrollCardVOne, ProductListItem, type ProductModelProps, ProductSearchScreen, ProfilePage, ROUTES, RegisterComponentTwo, SAMPLE_FULL_ADDRESS, SAMPLE_ORDER, SAMPLE_ORDER_HISTORY, SAMPLE_ORDER_ITEMS, SAMPLE_PARCEL, SAMPLE_PRODUCT, SHADOWS, SIZES, STORE_TYPE, SettingsPage, type StoreModelProps, type StoreTheme, TermsOfUsePage, TextFieldVOne, ThemeProvider, type UserProps, VERSION, WelcomePageTwo, authApi, convertToCurrency, createPaymentIntent, deleteClientCollectionApi, deleteClientCouponApi, deleteClientInboxApi, deleteClientOrderApi, deleteClientProductApi, deleteClientStoreApi, deleteMankindProductApi, deleteMankindStoreApi, deleteUserApi, formatPhoneNumber, generateUUID, getClientCollectionApi, getClientCollectionsApi, getClientCouponApi, getClientCouponsApi, getClientInboxApi, getClientInboxsApi, getClientOrderApi, getClientOrdersApi, getClientProductApi, getClientProductsApi, getClientStoreApi, getClientStoresApi, getClientUsersApi, getFromSecureStore, getMankindProductApi, getMankindProductsApi, getMankindStoreApi, getMankindStoresApi, getUsersApi, getpayment, login, postClientCollectionApi, postClientCouponApi, postClientInboxApi, postClientOrderApi, postClientProductApi, postClientStoreApi, postMankindProductApi, postMankindStoreApi, saveToSecureStore, showStripeHostedPage, stripeConverter, updateClientCollectionApi, updateClientCouponApi, updateClientInboxApi, updateClientOrderApi, updateClientProductApi, updateClientStoreApi, updateMankindProductApi, updateMankindStoreApi, updateUserApi, useAuth, useCart, useClientCollection, useClientOnlyValue, useClientOrder, useClientProduct, useClientStore, useFavorite, useMankindProduct, useMankindStore, useTheme, verify };
